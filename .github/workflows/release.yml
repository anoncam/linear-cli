name: Release

on:
  push:
    branches:
      - main

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
      packages: write
      
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'
          
      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          
      - name: Install dependencies
        run: |
          npm install --legacy-peer-deps
          # Regenerate package-lock.json to ensure it's in sync
          npm run rebuild-lockfile
          # Commit the updated package-lock.json if it changed
          if git diff --exit-code package-lock.json; then
            echo "No changes to package-lock.json"
          else
            git add package-lock.json
            git commit -m "chore: update package-lock.json [skip ci]"
          fi
          
      - name: Run tests
        run: npm test
        
      - name: Run linting
        run: npm run lint || echo "Linting issues found but continuing build"
        
      - name: Bump version
        id: bump_version
        run: |
          # Get the latest version
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version: $CURRENT_VERSION"
          
          # Split into major, minor, patch
          IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR="${VERSION_PARTS[0]}"
          MINOR="${VERSION_PARTS[1]}"
          PATCH="${VERSION_PARTS[2]}"
          
          # Bump patch version
          NEW_PATCH=$((PATCH + 1))
          NEW_VERSION="$MAJOR.$MINOR.$NEW_PATCH"
          echo "New version: $NEW_VERSION"
          
          # Update package.json
          npm version $NEW_VERSION --no-git-tag-version
          
          # Export for later steps
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
      - name: Build package
        run: npm run build
        
      - name: Create Release Commit
        run: |
          git add package.json package-lock.json
          git commit -m "chore(release): bump version to ${{ steps.bump_version.outputs.new_version }}"
          git tag -a "v${{ steps.bump_version.outputs.new_version }}" -m "Release v${{ steps.bump_version.outputs.new_version }}"
          
      - name: Push Release Commit
        run: |
          git push
          git push --tags
          
      - name: Generate Release Notes
        id: release_notes
        run: |
          # Extract changes since the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -z "$PREVIOUS_TAG" ]; then
            # If no previous tag, use all commits
            CHANGELOG=$(git log --pretty=format:"* %s (%h)" HEAD)
          else
            # Get changes since previous tag
            CHANGELOG=$(git log --pretty=format:"* %s (%h)" ${PREVIOUS_TAG}..HEAD)
          fi
          
          # Save changelog to file
          echo "$CHANGELOG" > RELEASE_NOTES.md
          echo "notes_file=RELEASE_NOTES.md" >> $GITHUB_OUTPUT
          
      - name: Create and Sign GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release v${{ steps.bump_version.outputs.new_version }}
          tag_name: v${{ steps.bump_version.outputs.new_version }}
          body_path: ${{ steps.release_notes.outputs.notes_file }}
          token: ${{ secrets.GITHUB_TOKEN }}
          draft: false
          
      - name: Publish to npm
        run: npm publish --provenance --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          format: spdx-json
          output-file: linear-cli-sbom.json
          
      - name: Attach SBOM to Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.bump_version.outputs.new_version }}
          files: linear-cli-sbom.json
          token: ${{ secrets.GITHUB_TOKEN }}